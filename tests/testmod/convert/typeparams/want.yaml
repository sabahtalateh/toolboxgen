# type C[A, B any] *interface {
#	F(a A) (B, error)
# }
C:
  typedef: C[A, B] *interface{ F func (a A) (B, error) }
  intro:
    interface: '*{..}'
    fields:
      - name: F
        func: '{..}'
        params: [ a A ]
        results: [ B, error ]

# type A[X, Y, Z any] struct {
#	f  *X
#	f2 []C[Y, uint]
#	f3 *Z
# }
# type C[A, B any] *interface {
#	F(a A) (B, error)
# }
A:
  struct: A[X, Y, Z]
  fields:
    - f *X
    - name: f2
      typedef: '[]C[A, B] *interface{ F func (a A) (B, error) }'
      actual: [ Y, uint ]
      intro:
        interface: '*{..}'
        fields:
          - name: F
            func: '{..}'
            params: [ a Y ]
            results: [ uint, error ]
    - f3 *Z

# type B[T any] A[[]string, []T, []struct{ a A[**T, struct{}, **T] }]
B:
  typedef: B[T] A[[]string, []T, []struct{ a A[**T, struct{}, **T] }]
  # type A[[]string, []T, []struct{ a A[**T, struct{}, **T] }] struct {
  #	  f  *[]string
  #	  f2 []C[[]T, uint]
  #	  f3 *[]struct{ a A[**T, struct{}, **T] }
  # }
  intro:
    struct: A[X, Y, Z]
    actual:
      - '[]string'
      - '[]T'
      - struct: '[]{..}'    # []struct{ a A[**T, struct{}, **T] }
        fields:
          - name: a
            # type A[**T, struct{}, ***T] struct {
            #	f  ***T
            #	f2 []C[struct{}, uint]
            #	f3 ***T
            # }
            struct: A[X, Y, Z]
            actual:
              - '**T'
              - struct: '{..}'
              - '**T'
            fields:
              - f ***T
              # C[struct{}, uint]
              # type C[struct{}, uint] *interface {
              #	  F(a struct{}) (uint, error)
              # }
              - name: f2
                typedef: '[]C[A, B] *interface{ F func (a A) (B, error) }'
                actual:
                  - struct: '{..}'
                  - uint
                intro:
                  interface: '*{..}'
                  fields:
                    - name: F
                      func: '{..}'
                      params:
                        - name: a
                          struct: '{..}'
                      results: [ uint, error ]
              - f3 ***T
    # {
    #   f  *[]string
    #   f2 []C[[]T, uint]
    #   f3 *[]struct{ a A[**T, struct{}, **T] }
    # }
    fields:
      - f *[]string
      - name: f2
        # C[[]T, uint]
        # type C[[]T, uint] *interface {
        #   F(a []T) (v, error)
        # }
        typedef: '[]C[A, B] *interface{ F func (a A) (B, error) }'
        actual: [ '[]T', uint ]
        intro:
          interface: '*{..}'
          fields:
            - name: F
              func: '{..}'
              params: [ 'a []T' ]
              results: [ uint, error ]
      - name: f3
        # *[]struct{ a A[**T, struct{}, **T] }
        struct: '*[]{..}'
        fields:
          - name: a
            # type A[**T, struct{}, **T] struct {
            #	f  ***T
            #	f2 []C[struct{}, uint]
            #	f3 ***T
            # }
            struct: A[X, Y, Z]
            actual:
              - '**T'
              - struct: '{..}'
              - '**T'
            fields:
              - f ***T
              - name: f2
                # type C[struct{}, uint] *interface {
                #	F(a struct{}) (uint, error)
                # }
                typedef: '[]C[A, B] *interface{ F func (a A) (B, error) }'
                actual:
                  - struct: '{..}'
                  - uint
                intro:
                  interface: '*{..}'
                  fields:
                    - name: F
                      func: '{..}'
                      params:
                        - name: a
                          struct: '{..}'
                      results: [ uint, error ]
              - f3 ***T